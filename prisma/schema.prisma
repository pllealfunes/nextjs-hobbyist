// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String     @id @default(uuid())
  title     String
  content   String?
  category  Category[]
  published Boolean    @default(false)
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  comments  Comment[]
  likes     Like[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  photo     String? // URL to the user's profile picture
  links     Json? // Array of links to websites or social media
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model User {
  id               String    @id @default(uuid())
  name             String?
  username         String?   @unique
  email            String?   @unique
  password         String?
  role             Role      @default(USER)
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  profile          Profile?
  sentMessages     Message[] @relation("sentMessages")
  receivedMessages Message[] @relation("receivedMessages")
  threads          Thread[]  @relation("threadUsers")
  Thread           Thread[]
}

model Message {
  id            String    @id @default(uuid())
  sender        User      @relation("sentMessages", fields: [senderId], references: [id])
  senderId      String
  recipient     User      @relation("receivedMessages", fields: [recipientId], references: [id])
  recipientId   String
  content       String
  attachmentUrl String? // Nullable, URL of the attached file
  sentAt        DateTime  @default(now())
  readAt        DateTime? // Nullable, stores when the recipient read the message
  deletedAt     DateTime? // Nullable, for soft-deletion of the message
  Thread        Thread?   @relation(fields: [threadId], references: [id])
  threadId      String?
}

model Thread {
  id          String    @id @default(uuid())
  users       User[]    @relation("threadUsers") // Many-to-many relation for participants
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdById String?
}

enum Role {
  ADMIN
  USER
}
