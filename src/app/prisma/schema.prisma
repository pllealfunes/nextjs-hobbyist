// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  comments  Comment[]
  likes     Like[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Comment {
  id        String    @default(cuid()) @id
  content   String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  post      Post?     @relation(fields: [postId], references: [id]) // A comment can have one post
  postId    Int?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Profile {
  id         Int     @id @default(autoincrement())
  bio        String?
  photo      String? // URL to the user's profile picture
  links      Json?   // Array of links to websites or social media
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  role          Role       @default(USER)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  profile       Profile? 
}

enum Role {
  ADMIN
  USER
}